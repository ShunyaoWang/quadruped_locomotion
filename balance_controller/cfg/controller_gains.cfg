#!/usr/bin/env python
PACKAGE = "balance_controller"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
#        Name            Type      Level  Description                           Default   Min       Max
gen.add( "heading_kp" ,           double_t, 0,     "Proportional gain.",        300,      0,       5000)
gen.add( "heading_kd" ,           double_t, 0,     "Derivative gain.",          40,       0,       1000)
gen.add( "heading_kff" ,          double_t, 0,     "Feedforward gain.",         1,        0,       100)

gen.add( "lateral_kp" ,           double_t, 0,     "Proportional gain.",        800,      0,       5000)
gen.add( "lateral_kd" ,           double_t, 0,     "Derivative gain.",          100,       0,       1000)
gen.add( "lateral_kff" ,          double_t, 0,     "Feedforward gain.",         1,        0,       100)

gen.add( "vertical_kp" ,           double_t, 0,     "Proportional gain.",        800,      0,       5000)
gen.add( "vertical_kd" ,           double_t, 0,     "Derivative gain.",          100,       0,       1000)
gen.add( "vertical_kff" ,          double_t, 0,     "Feedforward gain.",         1,        0,       100)

gen.add( "roll_kp" ,           double_t, 0,     "Proportional gain.",        200,      0,       5000)
gen.add( "roll_kd" ,           double_t, 0,     "Derivative gain.",          100,       0,       1000)
gen.add( "roll_kff" ,          double_t, 0,     "Feedforward gain.",         0.2,        0,       100)

gen.add( "pitch_kp" ,           double_t, 0,     "Proportional gain.",        400,      0,       5000)
gen.add( "pitch_kd" ,           double_t, 0,     "Derivative gain.",          80,       0,       1000)
gen.add( "pitch_kff" ,          double_t, 0,     "Feedforward gain.",         0.2,        0,       100)

gen.add( "yaw_kp" ,           double_t, 0,     "Proportional gain.",        200,      0,       5000)
gen.add( "yaw_kd" ,           double_t, 0,     "Derivative gain.",          50,       0,       1000)
gen.add( "yaw_kff" ,          double_t, 0,     "Feedforward gain.",         1,        0,       100)

gen.add( "gravity_compensation_percentage" , double_t, 0,     "gravity compensation percentage",         1.04,        0,       2)

gen.add( "x_dir_kp" ,           double_t, 0,     "single_leg_controller X kp.",        300,      0,       1000)
gen.add( "x_dir_kd" ,           double_t, 0,     "single_leg_controller X kd.",        20,      0,       1000)
gen.add( "y_dir_kp" ,           double_t, 0,     "single_leg_controller Y kp.",        300,      0,       1000)
gen.add( "y_dir_kd" ,           double_t, 0,     "single_leg_controller Y kd.",        20,      0,       1000)
gen.add( "z_dir_kp" ,           double_t, 0,     "single_leg_controller Z kp.",        800,      0,       1000)
gen.add( "z_dir_kd" ,           double_t, 0,     "single_leg_controller Z kd.",        80,      0,       1000)

# gen.add("int_param",    int_t,    0, "An Integer parameter", 50,  0, 100)
# gen.add("double_param", double_t, 0, "A double parameter",    .5, 0,   1)
# gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")
# gen.add("bool_param",   bool_t,   0, "A Boolean parameter",  True)
#
# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
#
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "balance_controller", "balance_controller"))
