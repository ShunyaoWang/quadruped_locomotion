cmake_minimum_required(VERSION 2.8.3)
project(free_gait_ros)

set(CMAKE_CXX_FLAGS "-std=c++11 ${CMAKE_CXX_FLAGS}")

## Find catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS
  free_gait_msgs
  free_gait_core
  quadruped_model
  qp_solver
  curves_ros
  grid_map_core
  grid_map_ros
  pluginlib
  robot_state_publisher
  kdl_parser
)

## System dependencies are found with CMake's conventions
find_package(Eigen3 REQUIRED)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
    INCLUDE_DIRS
      include
      ${EIGEN3_INCLUDE_DIR}
    LIBRARIES
      ${PROJECT_NAME}
    CATKIN_DEPENDS
      free_gait_msgs
      free_gait_core
      quadruped_model
      qp_solver
      curves_ros
      grid_map_core
      grid_map_ros
      pluginlib
      robot_state_publisher
      kdl_parser
)

# Attempt to find catkinized kindr
find_package(kindr QUIET)
if(NOT kindr_FOUND)
  # Attempt to find package-based kindr
  find_package(PkgConfig REQUIRED)
  pkg_check_modules(kindr kindr REQUIRED)
endif()

###########
## Build ##
###########

## Specify additional locations of header files
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
)

## Declare a cpp library
add_library(${PROJECT_NAME}
   src/StepRosConverter.cpp
   src/StepFrameConverter.cpp
   src/FreeGaitActionServer.cpp
   src/FreeGaitActionClient.cpp
   src/AdapterRos.cpp
   src/AdapterRosInterfaceBase.cpp
   #src/AdapterRosInterfaceDummy.cpp
   src/StateRosPublisher.cpp
   src/RosVisualization.cpp
   test/gait_generate_client.cpp
   test/FootstepOptimization.cpp
)
add_library(${PROJECT_NAME}_plugin
  src/AdapterRosInterfaceDummy.cpp
  src/AdapterDummy.cpp
  src/AdapterRosInterfaceGazebo.cpp
  src/AdapterGazebo.cpp
  )
target_link_libraries(${PROJECT_NAME}_plugin
  ${catkin_LIBRARIES}
)
target_link_libraries(${PROJECT_NAME}
  ${catkin_LIBRARIES}
)
add_executable(steps_test test/test.cpp) #test/AdapterDummy.cpp)
target_link_libraries(steps_test ${PROJECT_NAME}
  ${catkin_LIBRARIES})

add_executable(steps_test_kp test/test_kp.cpp) #test/AdapterDummy.cpp)
target_link_libraries(steps_test_kp ${PROJECT_NAME}
  ${catkin_LIBRARIES})
add_executable(action_server_test_node test/action_server_test.cpp)
target_link_libraries(action_server_test_node
  ${PROJECT_NAME}
  ${catkin_LIBRARIES})

add_executable(action_client_test_node test/action_client_test.cpp)
target_link_libraries(action_client_test_node
  ${PROJECT_NAME}
  ${catkin_LIBRARIES})

add_executable(action_server_test_node_kp test/action_server_test_node_kp.cpp)
target_link_libraries(action_server_test_node_kp
  ${PROJECT_NAME}
  ${catkin_LIBRARIES})

add_executable(action_client_test_node_kp test/action_client_test_node_kp.cpp)
target_link_libraries(action_client_test_node_kp
  ${PROJECT_NAME}
  ${catkin_LIBRARIES})

add_executable(robot_state_pub_node test/robotStatePublisher.cpp)
target_link_libraries(robot_state_pub_node
  ${PROJECT_NAME}
  ${catkin_LIBRARIES})

  add_executable(foothold_optimization_test test/test_foothold_optimization.cpp)
  target_link_libraries(foothold_optimization_test
    ${PROJECT_NAME}
    ${catkin_LIBRARIES})


#############
## Testing ##
#############

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
## Add gtest based cpp test target and link libraries
#catkin_add_gtest(${PROJECT_NAME}-test
#  test/test_free_gait_ros.cpp
#  test/AdapterDummy.cpp
#  test/StepTest.cpp
#)
#if(TARGET ${PROJECT_NAME}-test)
#  target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
#endif()

install(TARGETS ${PROJECT_NAME}
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(DIRECTORY include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
)
